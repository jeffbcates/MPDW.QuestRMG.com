@model Quest.MPDW.Support.Models.BulkUpdatesViewModel
@{
    ViewBag.Title = "Bulk Updates Log";
    Layout = "~/Views/Shared/_LayoutSupport.cshtml";
}

<div class="questTableTitle">Bulk Updates Log</div>

<div id="tblBulkUpdateLogs" class="qrmgTable"></div>

<script type="text/javascript">
    var _tblBulkUpdateLogs;
    $(function () {
        var tblBulkUpdateLogs = {
            name: 'tblBulkUpdateLogs',
            element: 'tblBulkUpdateLogs',
            prefix: 'blkupd',
            uri: '/Support/BulkUpdates',
            ctx: {
                elements: ['_questctx', '_questmm', '_questnb']
            },
            autoLoad: true,
            mask: '#pageContent',
            callback: cbTblBulkUpdateLogs,
            columns: [
                { name: 'Id', hidden: true, key: true },
                { name: 'Event', label: 'Event' },
                { name: 'Message', label: 'Message' },
                { name: 'NumRows', label: '# Rows', align: 'right' },
                { name: 'BulkInsertColumn', label: 'Bulk Insert Column' },
                { name: 'Parameters', label: 'Parameters' },
                { name: 'Filter', label: 'Filter' },
                { name: 'Tableset', label: 'Tableset' },
                { name: 'Database', label: 'Database' },
                { name: 'Data', label: 'Data' },
                { name: 'UserSessionId', label: 'USID' },
                { name: 'Username', label: 'Username' },
                { name: 'Batch', label: 'Batch' },
                { name: 'Created', label: 'Created' },
            ],
            paging: {
                Top: true,
                Bottom: true,
                PageSize: 100,
                PageSizeOptions: [100, 200, 500, 1000],
            },
            bNoDefaultOptions: true,
            operations: [
            ],
            commands: [
                { name: 'ShowBatch', label: 'Show Batch', method: 'GET', single: true, callback: cbShowBatch },
                { name: 'ClearBatch', label: 'Clear Batch', method: 'GET', NoSelectionsAllowed: true, callback: cbClearBatch },
                { name: 'ExportToExcel', label: 'Export to Excel', method: 'GET', NoSelectionsAllowed: true, callback: cbExportToExcel },
                { name: 'Clear', label: 'Clear Log', method: 'POST', NoSelectionsAllowed: true, callback: cbClear },
                { name: 'Delete', label: 'Delete Items', method: 'POST', callback: cbDelete },
            ],
            events: [
            ],
            contextMenu: [
            ]
        }
        _tblBulkUpdateLogs = new qrmgTable(tblBulkUpdateLogs);
    });
    function cbTblBulkUpdateLogs(ud, d) {
    }
    function cbShowBatch(ud, d) {
        if (d.questStatus) {
            return;
        }
        else {
            var r = _tblBulkUpdateLogs.GetRow(d.Id);
            _tblBulkUpdateLogs.FilterColumn('Batch', 1, r.Batch, true);
            _tblBulkUpdateLogs.Load();
        }
        return (true);
    }
    function cbExportToExcel(ud, d) {

        $('#frmBulkUpdateLogsExportToExcel').remove();
        var _frmExport = document.createElement("form");
        _frmExport.setAttribute("id", "frmBulkUpdateLogsExportToExcel");
        _frmExport.setAttribute("method", "get");
        _frmExport.setAttribute("action", "/Support/BulkUpdates/List");
        _frmExport.setAttribute("target", "_blank");

        var _ctx = _tblBulkUpdateLogs._getctx();
        for (var f in _ctx) {
            var _in = document.createElement("input");
            _in.setAttribute("type", "hidden");
            _in.setAttribute("name", f);
            if (f == 'QueryOptions') {
                _in.setAttribute("value", JSON.stringify(_ctx[f]));
            }
            else {
                _in.setAttribute("value", _ctx[f]);
            }
            _frmExport.appendChild(_in);
        }

        var _bExportToExcel = document.createElement("input");
        _bExportToExcel.setAttribute("type", "hidden");
        _bExportToExcel.setAttribute("name", "bExportToExcel");
        _bExportToExcel.setAttribute("value", true);
        _frmExport.appendChild(_bExportToExcel);

        document.body.appendChild(_frmExport);
        _frmExport.submit();

        return (true);
    }
    function cbClearBatch(ud, d) {
        _tblBulkUpdateLogs.ClearFilterColumn();
        _tblBulkUpdateLogs.Load();
        return (true);
    }
    function cbClear(ud, d) {
        if (d.questStatus) {
            if (IsAppSuccess(d)) {
                _tblBulkUpdateLogs.Load();
            }
        }
    }
    function cbDelete(ud, d) {
        if (d.questStatus) {
            if (IsAppSuccess(d)) {
                _tblBulkUpdateLogs.Load();
            }
        }
    }
</script>
