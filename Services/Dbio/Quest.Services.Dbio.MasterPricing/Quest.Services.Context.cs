//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Quest.Services.Dbio.MasterPricing
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MasterPricingEntities : DbContext
    {
        public MasterPricingEntities()
            : base("name=MasterPricingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FilterColumns> FilterColumns { get; set; }
        public virtual DbSet<FilterEntityTypes> FilterEntityTypes { get; set; }
        public virtual DbSet<FilterFolders> FilterFolders { get; set; }
        public virtual DbSet<FilterItemJoins> FilterItemJoins { get; set; }
        public virtual DbSet<FilterItems> FilterItems { get; set; }
        public virtual DbSet<FilterOperations> FilterOperations { get; set; }
        public virtual DbSet<FilterOperators> FilterOperators { get; set; }
        public virtual DbSet<FilterProcedureParameters> FilterProcedureParameters { get; set; }
        public virtual DbSet<FilterProcedures> FilterProcedures { get; set; }
        public virtual DbSet<Filters> Filters { get; set; }
        public virtual DbSet<FilterTables> FilterTables { get; set; }
        public virtual DbSet<FilterValues> FilterValues { get; set; }
        public virtual DbSet<FilterViews> FilterViews { get; set; }
        public virtual DbSet<BulkInsertLogs> BulkInsertLogs { get; set; }
        public virtual DbSet<BulkUpdateLogs> BulkUpdateLogs { get; set; }
        public virtual DbSet<DatabaseLogs> DatabaseLogs { get; set; }
        public virtual DbSet<ExceptionLogs> ExceptionLogs { get; set; }
        public virtual DbSet<FilterLogs> FilterLogs { get; set; }
        public virtual DbSet<HTTPRequestLogs> HTTPRequestLogs { get; set; }
        public virtual DbSet<LogSettings> LogSettings { get; set; }
        public virtual DbSet<PortalRequestLogs> PortalRequestLogs { get; set; }
        public virtual DbSet<StoredProcedureLogs> StoredProcedureLogs { get; set; }
        public virtual DbSet<TablesetLogs> TablesetLogs { get; set; }
        public virtual DbSet<Columns> Columns { get; set; }
        public virtual DbSet<Databases> Databases { get; set; }
        public virtual DbSet<EntityTypes> EntityTypes { get; set; }
        public virtual DbSet<Lookups> Lookups { get; set; }
        public virtual DbSet<StoredProcedureParameters> StoredProcedureParameters { get; set; }
        public virtual DbSet<StoredProcedures> StoredProcedures { get; set; }
        public virtual DbSet<Tables> Tables { get; set; }
        public virtual DbSet<TypeLists> TypeLists { get; set; }
        public virtual DbSet<Views> Views { get; set; }
        public virtual DbSet<TablesetColumns> TablesetColumns { get; set; }
        public virtual DbSet<Tablesets> Tablesets { get; set; }
        public virtual DbSet<TablesetTables> TablesetTables { get; set; }
        public virtual DbSet<TablesetViews> TablesetViews { get; set; }
        public virtual DbSet<vwLookupsList4> vwLookupsList4 { get; set; }
        public virtual DbSet<vwTablesetsList4> vwTablesetsList4 { get; set; }
        public virtual DbSet<vwTablesetTablesList2> vwTablesetTablesList2 { get; set; }
        public virtual DbSet<vwTablesetViewsList2> vwTablesetViewsList2 { get; set; }
        public virtual DbSet<vwTypeListsList> vwTypeListsList { get; set; }
    
        public virtual int CleanDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CleanDatabase");
        }
    
        public virtual int CleanFilters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CleanFilters");
        }
    
        public virtual int CleanSetup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CleanSetup");
        }
    
        public virtual int CleanTablesets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CleanTablesets");
        }
    
        public virtual int DeleteFilterById(Nullable<int> filterId)
        {
            var filterIdParameter = filterId.HasValue ?
                new ObjectParameter("FilterId", filterId) :
                new ObjectParameter("FilterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFilterById", filterIdParameter);
        }
    
        public virtual ObjectResult<MPDWMetaFields_Result> MPDWMetaFields(string p_Username, Nullable<int> p_UserSessionId)
        {
            var p_UsernameParameter = p_Username != null ?
                new ObjectParameter("p_Username", p_Username) :
                new ObjectParameter("p_Username", typeof(string));
    
            var p_UserSessionIdParameter = p_UserSessionId.HasValue ?
                new ObjectParameter("p_UserSessionId", p_UserSessionId) :
                new ObjectParameter("p_UserSessionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MPDWMetaFields_Result>("MPDWMetaFields", p_UsernameParameter, p_UserSessionIdParameter);
        }
    
        public virtual ObjectResult<ShowFilter_Result> ShowFilter(string filterName)
        {
            var filterNameParameter = filterName != null ?
                new ObjectParameter("FilterName", filterName) :
                new ObjectParameter("FilterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowFilter_Result>("ShowFilter", filterNameParameter);
        }
    
        public virtual ObjectResult<ShowFilterById_Result> ShowFilterById(Nullable<int> filterId)
        {
            var filterIdParameter = filterId.HasValue ?
                new ObjectParameter("FilterId", filterId) :
                new ObjectParameter("FilterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowFilterById_Result>("ShowFilterById", filterIdParameter);
        }
    
        public virtual ObjectResult<ShowTableset_Result> ShowTableset(string tablesetName)
        {
            var tablesetNameParameter = tablesetName != null ?
                new ObjectParameter("TablesetName", tablesetName) :
                new ObjectParameter("TablesetName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowTableset_Result>("ShowTableset", tablesetNameParameter);
        }
    
        public virtual ObjectResult<UnderBarTest_Result> UnderBarTest(string p_Username, Nullable<int> p_UserSessionId)
        {
            var p_UsernameParameter = p_Username != null ?
                new ObjectParameter("p_Username", p_Username) :
                new ObjectParameter("p_Username", typeof(string));
    
            var p_UserSessionIdParameter = p_UserSessionId.HasValue ?
                new ObjectParameter("p_UserSessionId", p_UserSessionId) :
                new ObjectParameter("p_UserSessionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UnderBarTest_Result>("UnderBarTest", p_UsernameParameter, p_UserSessionIdParameter);
        }
    }
}
